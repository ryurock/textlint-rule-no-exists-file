{"version":3,"sources":["../src/index.ts"],"names":["fs","require","report","context","options","allows","Syntax","RuleError","getSource","Link","node","matched","url","match","filePath","getFilePath","currentPath","process","env","PWD","fileBasePath","path","dirname","resolvePath","join","existsSync","text","isIgnored","some","allow","includes","ruleError"],"mappings":";;;;;;;AAIA;;;;;;AAFA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAQA,IAAMC,MAAmC,GAAG,gBAACC,OAAD,EAAyD;AAAA,MAA1BC,OAA0B,uEAAP,EAAO;AACjG,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,EAAjC;AACA,MAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBL,IAAAA,MAApB;AAA4BM,IAAAA;AAA5B,MAAyCL,OAA/C;AACA,SAAO;AACH,KAACG,MAAM,CAACG,IAAR,EAAcC,IAAd,EAA6B;AACzB;AACA,UAAIC,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,KAAT,CAAe,KAAf,CAAd;AACA,UAAIF,OAAJ,EAAa,OAHY,CAIzB;;AACAA,MAAAA,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,KAAT,CAAe,iBAAf,CAAV;AACA,UAAI,CAACF,OAAL,EAAc;AAEd,UAAMG,QAAQ,GAAGX,OAAO,CAACY,WAAR,EAAjB;AACA,UAAID,QAAQ,IAAI,IAAhB,EAAsB;AAEtB,UAAME,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,GAAhC;AACA,UAAIH,WAAW,IAAI,IAAnB,EAAyB,OAZA,CAczB;;AACA,UAAIN,IAAI,CAACE,GAAL,CAASC,KAAT,CAAe,QAAf,CAAJ,EAA8B;AAC1B,YAAMO,YAAY,GAAGC,IAAI,CAACC,OAAL,CAAaR,QAAb,CAArB;AACA,YAAMS,WAAW,GAAGF,IAAI,CAACG,IAAL,CAAUJ,YAAV,EAAwBV,IAAI,CAACE,GAA7B,CAApB;AACA,YAAIZ,EAAE,CAACyB,UAAH,CAAcF,WAAd,CAAJ,EAAgC;AAEhC,YAAMG,IAAI,GAAGlB,SAAS,CAACE,IAAD,CAAtB,CAL0B,CAKI;;AAC9B,YAAMiB,SAAS,GAAGtB,MAAM,CAACuB,IAAP,CAAYC,KAAK,IAAIH,IAAI,CAACI,QAAL,CAAcD,KAAd,CAArB,CAAlB;AACA,YAAIF,SAAJ,EAAe;AAEf,YAAMI,SAAS,GAAG,IAAIxB,SAAJ,oIAA2CmB,IAA3C,EAAlB;AACA,eAAOxB,MAAM,CAACQ,IAAD,EAAOqB,SAAP,CAAb,CAV0B,CAY9B;AACC,OAbD,MAaO,IAAIrB,IAAI,CAACE,GAAL,CAASC,KAAT,CAAe,UAAf,CAAJ,EAAgC;AACnC,YAAMU,YAAW,GAAGF,IAAI,CAACG,IAAL,CAAUR,WAAV,EAAuBN,IAAI,CAACE,GAA5B,CAApB,CADmC,CAEnC;;;AACA,YAAIZ,EAAE,CAACyB,UAAH,CAAcF,YAAd,CAAJ,EAAgC;;AAEhC,YAAMG,KAAI,GAAGlB,SAAS,CAACE,IAAD,CAAtB,CALmC,CAKL;;;AAC9B,YAAMiB,UAAS,GAAGtB,MAAM,CAACuB,IAAP,CAAYC,KAAK,IAAIH,KAAI,CAACI,QAAL,CAAcD,KAAd,CAArB,CAAlB;;AACA,YAAIF,UAAJ,EAAe;;AAEf,YAAMI,UAAS,GAAG,IAAIxB,SAAJ,sGAAsCmB,KAAtC,EAAlB;;AACA,eAAOxB,MAAM,CAACQ,IAAD,EAAOqB,UAAP,CAAb;AACH;AACJ;;AAzCE,GAAP;AA2CH,CA9CD;;eAgDe7B,M","sourcesContent":["import { TxtNode } from \"@textlint/ast-node-types\";\nimport { TextlintRuleContext, TextlintRuleModule } from \"@textlint/types\";\nconst fs = require(\"fs\");\n\nimport * as path from \"path\";\n\nexport interface Options {\n    allows?: string[];\n}\n\nconst report: TextlintRuleModule<Options> = (context: TextlintRuleContext, options: Options = {}) => {\n    const allows = options.allows || [];\n    const {Syntax, RuleError, report, getSource} = context;\n    return {\n        [Syntax.Link](node: TxtNode) {\n            // アンカーは無視する\n            let matched = node.url.match(/^#/g);\n            if (matched) return;\n            // git の Current URL または 相対パス以外は無視する\n            matched = node.url.match(/^(\\.\\/|\\/(.*))/g);\n            if (!matched) return;\n\n            const filePath = context.getFilePath();\n            if (filePath == null) return;\n\n            const currentPath = process.env.PWD;\n            if (currentPath == null) return;\n\n            // 相対パスの場合\n            if (node.url.match(/^\\.\\//g)) {\n                const fileBasePath = path.dirname(filePath);\n                const resolvePath = path.join(fileBasePath, node.url);\n                if (fs.existsSync(resolvePath)) return;\n\n                const text = getSource(node); // Get text\n                const isIgnored = allows.some(allow => text.includes(allow));\n                if (isIgnored) return;\n\n                const ruleError = new RuleError(`相対パスのファイルが存在しませんでした Link: ${text}`);\n                return report(node, ruleError);\n\n            // Root Path 指定の場合\n            } else if (node.url.match(/^\\/(.*)/g)) {\n                const resolvePath = path.join(currentPath, node.url);\n                // ファイルが存在した場合\n                if (fs.existsSync(resolvePath)) return;\n\n                const text = getSource(node); // Get text\n                const isIgnored = allows.some(allow => text.includes(allow));\n                if (isIgnored) return;\n\n                const ruleError = new RuleError(`ファイルが存在しませんでした Link: ${text}`);\n                return report(node, ruleError);\n            }\n        }\n    }\n};\n\nexport default report;"],"file":"index.js"}